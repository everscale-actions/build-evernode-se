name: Build TON OS SE binaries

on:
  push:
    branches:
      - "main"

env:
  TONOS_SE_REPO_OWNER: tonlabs
  TONOS_SE_REPO_NAME: tonos-se

defaults:
  run:
    shell: bash

jobs:
  prepare:
    if: github.event.label.name == 'start_tests' || github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.runners-releases-matrix }}
      matrix: ${{ steps.set-matrix.outputs.releases-matrix }}      
    steps:
      - uses: actions/checkout@v2
      - name: Get TONOS SE Releases and Set matrix
        id: set-matrix
        uses: actions/github-script@v3
        with:
          script: |
            const runners = ['ubuntu-18.04', 'macos-10.15', 'windows-2019'];
            const { data: tonosReleases } = await github.repos.listReleases({owner: '${{ env.TONOS_SE_REPO_OWNER }}', repo: '${{ env.TONOS_SE_REPO_NAME }}'});
            const { data: binReleases } = await github.repos.listReleases({owner: '${{ github.repository_owner }}', repo: '${{ github.repository }}'.split('/')[1]});

            const tonosReleaseTags = tonosReleases.map(release=>release.tag_name);
            const binReleaseTags = binReleases.map(release=>release.tag_name);
            const newReleases = tonosReleaseTags.filter(r=>!binReleaseTags.includes(r));

            var include = [];
            runners.forEach(runner=>{
              newReleases.forEach(release=>{
                include.push({'runs-on': runner, 'release': release});
              })
            });

            core.info(JSON.stringify({include}));
            core.info(JSON.stringify({newReleases}));

            core.setOutput('runners-releases-matrix', JSON.stringify({include}));
            core.setOutput('releases-matrix', JSON.stringify({newReleases}));
