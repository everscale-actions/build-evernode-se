name: Build TON OS SE binaries

concurrency: "concurrency"

on:
  push:
    branches:
      - "main"
  workflow_dispatch:
  schedule:
    - cron: "0 0/4 * * *"

env:
  EVERNODE_SE_REPO_OWNER: tonlabs
  EVERNODE_SE_REPO_NAME: evernode-se

defaults:
  run:
    shell: bash

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      runners-releases-matrix: ${{ steps.set-matrix.outputs.runners-releases-matrix }}
      releases-matrix: ${{ steps.set-matrix.outputs.releases-matrix }}
    steps:
      - uses: actions/checkout@v3
      - name: Get EVERNODE SE Releases and Set matrix
        id: set-matrix
        uses: actions/github-script@v6
        with:
          script: |
            const runners = ['ubuntu-18.04', 'macos-10.15', 'windows-2019'];
            const { data: evernodeReleases } = await github.rest.repos.listReleases({owner: '${{ env.EVERNODE_SE_REPO_OWNER }}', repo: '${{ env.EVERNODE_SE_REPO_NAME }}'});
            const evernodeReleaseTags = evernodeReleases.map(release=>release.tag_name).filter(r => r >= '0.31.0');            

            const { data: binReleases } = await github.rest.repos.listReleases({owner: '${{ github.repository_owner }}', repo: '${{ github.repository }}'.split('/')[1]});
            const binReleaseTags = binReleases.map(release=>release.tag_name);

            const newReleases = evernodeReleaseTags.filter(r=>!binReleaseTags.includes(r));

            var include = [];
            runners.forEach(runner=>{
              newReleases.forEach(release=>{
                include.push({'runs-on': runner, 'release': release, 'dir': "node"});
              })
            });

            core.info(JSON.stringify({include}));

            core.setOutput('runners-releases-matrix', JSON.stringify({include}));
            core.setOutput('releases-matrix', JSON.stringify({include: newReleases.map(release=>({'release': release}))}));
  build:
    if: ${{ needs.prepare.outputs.runners-releases-matrix != '{"include":[]}' }}
    needs: prepare
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.runners-releases-matrix) }}
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout evernode-se
        uses: actions/checkout@v3
        with:
          repository: "${{ env.EVERNODE_SE_REPO_OWNER }}/${{ env.EVERNODE_SE_REPO_NAME }}"
          ref: ${{ matrix.release }}

      - name: âš¡ Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ matrix.runs-on }}-cargoregistry-${{ hashFiles('ton-node-se/**/Cargo.toml') }}
          restore-keys: ${{ matrix.runs-on }}-cargoregistry-

      - name: Install latest rust toolchain
        id: toolchain-install
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true

      - run: |
          echo "rustc: {{ steps.toolchain-install.outputs.rustc  }}"
          echo "rustc_hash: {{ steps.toolchain-install.outputs.rustc_hash  }}"
          echo "cargo: {{ steps.toolchain-install.outputs.cargo  }}"
          echo "rustup: {{ steps.toolchain-install.outputs.rustup  }}"

      - name: ðŸ”¨ Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: ðŸ”¨ Tar Gzip node binaries
        run: |
          if [[ "${{ runner.os }}" == 'Windows' ]]; then
            binFile=ton_node_startup.exe
          else
            chmod +x target/release/ton_node_startup
            binFile=ton_node_startup
          fi
          tar -czvf evernode-se-${{ runner.os }}-${{ matrix.release }}.tar.gz -C target/release/ $binFile

      - name: ðŸ“š Publish artifact
        uses: actions/upload-artifact@v3
        with:
          name: evernode-se-${{ runner.os }}-${{ matrix.release }}
          path: evernode-se-${{ runner.os }}-${{ matrix.release }}.tar.gz
          if-no-files-found: error

  publish-release:
    needs:
      - prepare
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.releases-matrix) }}
    steps:
      - name: ðŸŽ£ Download Linux artifact
        uses: actions/download-artifact@v3
        with:
          name: evernode-se-Linux-${{ matrix.release }}

      - name: ðŸŽ£ Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: evernode-se-Windows-${{ matrix.release }}

      - name: ðŸŽ£ Download macOS artifact
        uses: actions/download-artifact@v3
        with:
          name: evernode-se-macOS-${{ matrix.release }}

      - name: Release
        id: release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true

          commit: ${{ github.sha }}
          tag: ${{ matrix.release }}
          token: ${{ github.token }}
