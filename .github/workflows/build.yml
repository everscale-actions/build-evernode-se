name: Build TON OS SE binaries

on:
  push:
    branches:
      - "main"

env:
  TONOS_SE_REPO_OWNER: tonlabs
  TONOS_SE_REPO_NAME: tonos-se

defaults:
  run:
    shell: bash

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      runners-releases-matrix: ${{ steps.set-matrix.outputs.runners-releases-matrix }}
      releases-matrix: ${{ steps.set-matrix.outputs.releases-matrix }}      
    steps:
      - uses: actions/checkout@v2
      - name: Get TONOS SE Releases and Set matrix
        id: set-matrix
        uses: actions/github-script@v3
        with:
          script: |
            const runners = ['ubuntu-18.04', 'macos-10.15', 'windows-2019'];
            const { data: tonosReleases } = await github.repos.listReleases({owner: '${{ env.TONOS_SE_REPO_OWNER }}', repo: '${{ env.TONOS_SE_REPO_NAME }}'});
            const { data: binReleases } = await github.repos.listReleases({owner: '${{ github.repository_owner }}', repo: '${{ github.repository }}'.split('/')[1]});

            const tonosReleaseTags = tonosReleases.map(release=>release.tag_name);
            const binReleaseTags = binReleases.map(release=>release.tag_name);
            const newReleases = tonosReleaseTags.filter(r=>!binReleaseTags.includes(r));

            var include = [];
            runners.forEach(runner=>{
              newReleases.forEach(release=>{
                include.push({'runs-on': runner, 'release': release});
              })
            });

            core.setOutput('runners-releases-matrix', JSON.stringify({include}));
            core.setOutput('releases-matrix', JSON.stringify({include: newReleases.map(release=>({'release': release}))}));
  build:
    needs: prepare
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.runners-releases-matrix) }}
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout tonos-se
        uses: actions/checkout@v2
        with:
          repository: "${{ env.TONOS_SE_REPO_OWNER }}/${{ env.TONOS_SE_REPO_NAME }}"
          ref: ${{ matrix.release }}

      - name: âš¡ Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ matrix.runs-on }}-cargoregistry-${{ hashFiles('ton-node-se/**/Cargo.toml') }}
          restore-keys: ${{ matrix.runs-on }}-cargoregistry-
          
      - name: ðŸ”¨ Build
        working-directory: ton-node-se
        env:
          CARGO_TERM_COLOR: always
        run: |
          cargo --version
          rustc --version
          # cargo build --release
          mkdir -p target/release
          if [[ "${{ runner.os }}" == 'Windows' ]]; then            
            echo "test" > target/release/ton_node_startup.exe
          else
            echo "test" > target/release/ton_node_startup
          fi

      - name: ðŸ”¨ TAR node binaries
        run: |
          mkdir -p ton-node
          if [[ "${{ runner.os }}" == 'Windows' ]]; then
            cp ton-node-se/target/release/ton_node_startup.exe ton-node/
          else
            cp ton-node-se/target/release/ton_node_startup ton-node/
            chmod +x ton-node/ton_node_startup
          fi
          tar -cvf ton-node-${{ runner.os }}-${{ matrix.release }}.tar -C ton-node *
          gzip -1 ton-node-${{ runner.os }}-${{ matrix.release }}.tar

      - name: ðŸ“š Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: ton-node-${{ runner.os }}-${{ matrix.release }}
          path: ton-node-${{ runner.os }}-${{ matrix.release }}.tar.gz
          if-no-files-found: error  

  publish-release:
    needs:
      - prepare
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.releases-matrix) }}    
    steps:
      - name: ðŸŽ£ Download Linux artifact
        uses: actions/download-artifact@v2
        with:
          name: ton-node-Linux-${{ matrix.release }}

      - name: ðŸŽ£ Download Windows artifact
        uses: actions/download-artifact@v2
        with:
          name: ton-node-Windows-${{ matrix.release }}

      - name: ðŸŽ£ Download macOS artifact
        uses: actions/download-artifact@v2
        with:
          name: ton-node-macOS-${{ matrix.release }}

      - name: Release
        id: release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: "./ton-node-*.tar.gz*"
          commit: ${{ github.sha }}
          tag: ${{ needs.prepare.outputs.release-tag }}
          token: ${{ github.token }}
